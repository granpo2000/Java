/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateFuncionRioArgs } from "./CreateFuncionRioArgs";
import { UpdateFuncionRioArgs } from "./UpdateFuncionRioArgs";
import { DeleteFuncionRioArgs } from "./DeleteFuncionRioArgs";
import { FuncionRioCountArgs } from "./FuncionRioCountArgs";
import { FuncionRioFindManyArgs } from "./FuncionRioFindManyArgs";
import { FuncionRioFindUniqueArgs } from "./FuncionRioFindUniqueArgs";
import { FuncionRio } from "./FuncionRio";
import { FuncionRioService } from "../funcionRio.service";
@graphql.Resolver(() => FuncionRio)
export class FuncionRioResolverBase {
  constructor(protected readonly service: FuncionRioService) {}

  async _funcionRiosMeta(
    @graphql.Args() args: FuncionRioCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FuncionRio])
  async funcionRios(
    @graphql.Args() args: FuncionRioFindManyArgs
  ): Promise<FuncionRio[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => FuncionRio, { nullable: true })
  async funcionRio(
    @graphql.Args() args: FuncionRioFindUniqueArgs
  ): Promise<FuncionRio | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FuncionRio)
  async createFuncionRio(
    @graphql.Args() args: CreateFuncionRioArgs
  ): Promise<FuncionRio> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FuncionRio)
  async updateFuncionRio(
    @graphql.Args() args: UpdateFuncionRioArgs
  ): Promise<FuncionRio | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FuncionRio)
  async deleteFuncionRio(
    @graphql.Args() args: DeleteFuncionRioArgs
  ): Promise<FuncionRio | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
